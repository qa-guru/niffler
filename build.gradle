plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'guru.qa'

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
}

subprojects {
    ext {
        dockerHubName = "qaguru"

        lombokVersion = '1.18.38'
        springKafkaVersion = '3.3.4'
        springVaultVersion = '4.2.1'
        springOpenApiVersion = '2.8.6'
        postgresDriverVersion = '42.7.5'
        flywayVersion = '11.7.2'
        springGrpcVersion = '3.1.0.RELEASE'
        springGraphqlDateTimeVersion = '6.0.0'
        springSecurityTestVersion = '6.4.5'
        jakartaJaxbVersion = '4.0.2'
        wsdl4jVersion = '1.6.3'
        protobufVersion = '4.30.2'
        grpcVersion = '1.72.0'
        thumbnailatorVersion = '0.4.20'
        apacheCsvVersion = '1.14.0'
        h2Version = '2.3.232'
        mockitoVersion = '5.17.0'

        dockerImage = System.getProperty("os.arch") == "aarch64" || System.getProperty("os.arch") == "arm64"
                ? "arm64v8/eclipse-temurin:21-jdk"
                : "eclipse-temurin:21-jdk"
        dockerArch = System.getProperty("os.arch") == "aarch64" || System.getProperty("os.arch") == "arm64"
                ? "arm64"
                : "amd64"
    }

    tasks.withType(Test).configureEach {
        options {
            systemProperties(System.getProperties())
        }
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
        useJUnitPlatform()
    }
}

dependencyUpdates {
    resolutionStrategy {
        componentSelection {
            all { ComponentSelection selection ->
                boolean isUnstable = ['alpha', 'beta', 'rc', 'm', 'snapshot'].any { keyword ->
                    selection.candidate.version.toLowerCase().contains(keyword)
                }
                if (isUnstable) {
                    selection.reject("Unstable version: ${selection.candidate.version}")
                }
            }
        }
    }
}
