buildscript {
    ext {
        protobufVersion = '3.24.3'
        grpcVersion = '1.58.0'
        junitVersion = '5.10.0'
        allureVersion = '2.25.0'
        selenideVersion = '7.2.1'
        retrofitVersion = '2.9.0'
        okhttp3Version = '3.14.9'
        logbackVersion = '1.4.11'
        slf4jVersion = '2.0.9'
        springJdbcVersion = '6.0.12'
        springCryptoVersion = '6.1.0'
        p6spyVersion = '3.9.1'
        hibernateVersion = '6.3.0.Final'
        kafkaClientsVersion = '3.5.1'
        saajVersion = '3.0.2'
        jakartaXmlBind = '4.0.1'
        userdataWsdlUrl = System.getProperty("test.env") == "docker"
                ? "http://userdata.niffler.dc:8089/ws/userdata.wsdl"
                : "http://127.0.0.1:8089/ws/userdata.wsdl"
    }
}

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.qameta.allure-adapter' version '2.11.2'
}

group = 'guru.qa'
version = '1.2.2'

allure {
    version.set("${allureVersion}")
    adapter {
        aspectjVersion.set("1.9.21.1")
        autoconfigure.set(true)
        aspectjWeaver.set(true)
    }
}

configurations {
    jaxb
}

tasks.register('genJaxb') {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${userdataWsdlUrl}"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema, package: "guru.qa.niffler.userdata.wsdl") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 17, target: 17, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

genJaxb.onlyIf {
    !project.hasProperty("skipjaxb")
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated-sources/jaxb'
        }
    }
}

dependencies {
    // Logs
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    // JUnit
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    // REST
    testImplementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    testImplementation "com.squareup.retrofit2:converter-jackson:${retrofitVersion}"
    testImplementation "com.squareup.okhttp3:logging-interceptor:${okhttp3Version}"
    testImplementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttp3Version}"
    // DB
    testImplementation "org.springframework:spring-jdbc:${springJdbcVersion}"
    testImplementation "org.postgresql:postgresql:${project.ext.postgresDriverVersion}"
    testImplementation "p6spy:p6spy:${p6spyVersion}"
    testImplementation "org.hibernate:hibernate-core:${hibernateVersion}"
    testImplementation "org.springframework.security:spring-security-crypto:${springCryptoVersion}"
    // Allure
    testImplementation "io.qameta.allure:allure-attachments:${allureVersion}"
    testImplementation("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.junit.jupiter"
    }
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}") {
        exclude group: 'com.codeborne'
    }
    testImplementation "io.qameta.allure:allure-okhttp3:${allureVersion}"
    testImplementation "io.qameta.allure:allure-grpc:${allureVersion}"
    // WEB
    testImplementation "com.codeborne:selenide:${selenideVersion}"
    // Utils
    testImplementation 'com.github.javafaker:javafaker:1.0.2'
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation 'com.github.vertical-blank:sql-formatter:2.0.3'
    // gRPC
    testImplementation "io.grpc:grpc-protobuf:${grpcVersion}"
    testImplementation "io.grpc:grpc-stub:${grpcVersion}"
    testImplementation "io.grpc:grpc-netty:${grpcVersion}"
    testImplementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    testImplementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    testImplementation project(':niffler-grpc-common')
    compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5' // Java 9+ compatibility - Do NOT update to 2.0.0
    // SOAP
    testImplementation "com.sun.xml.messaging.saaj:saaj-impl:${saajVersion}"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:${jakartaXmlBind}"
    implementation(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb "org.glassfish.jaxb:jaxb-xjc:${project.ext.glassfishJaxbVersion}"
    // Kafka
    testImplementation "org.apache.kafka:kafka-clients:${kafkaClientsVersion}"
    // Wiremock
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.1'
    testImplementation 'com.github.tomakehurst:wiremock-standalone:2.27.2'
    // Lombok
    testAnnotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

test {
    options {
        systemProperties(System.getProperties())
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    useJUnitPlatform()
}
